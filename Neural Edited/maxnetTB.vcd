$date
	Fri Nov 17 07:19:34 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module maxnetTB $end
$var wire 32 ! out [31:0] $end
$var wire 1 " done $end
$var reg 1 # clk $end
$var reg 1 $ rst $end
$var reg 1 % start $end
$var reg 32 & x1 [31:0] $end
$var reg 32 ' x2 [31:0] $end
$var reg 32 ( x3 [31:0] $end
$var reg 32 ) x4 [31:0] $end
$scope module toplevel $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 1 % start $end
$var wire 32 * x1 [31:0] $end
$var wire 32 + x2 [31:0] $end
$var wire 32 , x3 [31:0] $end
$var wire 32 - x4 [31:0] $end
$var wire 1 . ready $end
$var wire 32 / out [31:0] $end
$var wire 1 0 m4 $end
$var wire 1 1 m3 $end
$var wire 1 2 m2 $end
$var wire 1 3 m1 $end
$var wire 1 " done $end
$scope module CO $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 1 % start $end
$var wire 1 " done $end
$var reg 1 3 m1 $end
$var reg 1 2 m2 $end
$var reg 1 1 m3 $end
$var reg 1 0 m4 $end
$var reg 3 4 ns [2:0] $end
$var reg 3 5 ps [2:0] $end
$var reg 1 . ready $end
$upscope $end
$scope module DP $end
$var wire 1 # clk $end
$var wire 32 6 epsilon [31:0] $end
$var wire 1 3 m1 $end
$var wire 1 2 m2 $end
$var wire 1 1 m3 $end
$var wire 1 0 m4 $end
$var wire 1 $ rst $end
$var wire 32 7 x1 [31:0] $end
$var wire 32 8 x2 [31:0] $end
$var wire 32 9 x3 [31:0] $end
$var wire 32 : x4 [31:0] $end
$var wire 32 ; xo4 [31:0] $end
$var wire 32 < xo3 [31:0] $end
$var wire 32 = xo2 [31:0] $end
$var wire 32 > xo1 [31:0] $end
$var wire 32 ? w [31:0] $end
$var wire 32 @ out [31:0] $end
$var wire 1 A o4 $end
$var wire 1 B o3 $end
$var wire 1 C o2 $end
$var wire 1 D o1 $end
$var wire 1 " done $end
$var parameter 32 E one $end
$scope module b1 $end
$var wire 1 # clk $end
$var wire 32 F d [31:0] $end
$var wire 32 G dm [31:0] $end
$var wire 1 3 mux $end
$var wire 1 $ rst $end
$var wire 32 H w1 [31:0] $end
$var wire 32 I x [31:0] $end
$var wire 32 J xo [31:0] $end
$var wire 32 K x4 [31:0] $end
$var wire 32 L x3 [31:0] $end
$var wire 32 M x2 [31:0] $end
$var wire 32 N w4 [31:0] $end
$var wire 32 O w3 [31:0] $end
$var wire 32 P w2 [31:0] $end
$var wire 1 D o $end
$var wire 32 Q f [31:0] $end
$var wire 32 R am [31:0] $end
$var wire 32 S af [31:0] $end
$var reg 32 T d1 [31:0] $end
$scope module middle_reg $end
$var wire 1 # clk $end
$var wire 1 U ld $end
$var wire 1 $ rst $end
$var wire 1 V sclr $end
$var wire 32 W in [31:0] $end
$var parameter 32 X N $end
$var reg 32 Y out [31:0] $end
$upscope $end
$scope module mux_input $end
$var wire 32 Z I0 [31:0] $end
$var wire 32 [ I1 [31:0] $end
$var wire 1 3 select $end
$var wire 32 \ mux_out [31:0] $end
$var parameter 32 ] N $end
$upscope $end
$scope module mux_sign_bit $end
$var wire 32 ^ I1 [31:0] $end
$var wire 1 _ select $end
$var wire 32 ` mux_out [31:0] $end
$var wire 32 a I0 [31:0] $end
$var parameter 32 b N $end
$upscope $end
$scope module pu $end
$var wire 32 c w1 [31:0] $end
$var wire 32 d xo [31:0] $end
$var wire 32 e x4 [31:0] $end
$var wire 32 f x3 [31:0] $end
$var wire 32 g x2 [31:0] $end
$var wire 32 h w4 [31:0] $end
$var wire 32 i w3 [31:0] $end
$var wire 32 j w2 [31:0] $end
$var wire 32 k h4 [31:0] $end
$var wire 32 l h3 [31:0] $end
$var wire 32 m h2 [31:0] $end
$var wire 32 n h1 [31:0] $end
$var wire 32 o af [31:0] $end
$var wire 32 p a2 [31:0] $end
$var wire 32 q a1 [31:0] $end
$scope module A1 $end
$var wire 32 r operand_2 [31:0] $end
$var wire 32 s operand_1 [31:0] $end
$var reg 32 t adder_output [31:0] $end
$var reg 1 u guard_bit $end
$var reg 8 v operand_1_exponent [7:0] $end
$var reg 67 w operand_1_fraction [66:0] $end
$var reg 1 x operand_1_sign $end
$var reg 8 y operand_2_exponent [7:0] $end
$var reg 67 z operand_2_fraction [66:0] $end
$var reg 1 { operand_2_sign $end
$var reg 8 | result_exponent [7:0] $end
$var reg 67 } result_fraction [66:0] $end
$var reg 1 ~ result_sign $end
$var reg 1 !" round_bit $end
$var reg 1 "" sticky_bit $end
$var reg 67 #" sum [66:0] $end
$upscope $end
$scope module A2 $end
$var wire 32 $" operand_2 [31:0] $end
$var wire 32 %" operand_1 [31:0] $end
$var reg 32 &" adder_output [31:0] $end
$var reg 1 '" guard_bit $end
$var reg 8 (" operand_1_exponent [7:0] $end
$var reg 67 )" operand_1_fraction [66:0] $end
$var reg 1 *" operand_1_sign $end
$var reg 8 +" operand_2_exponent [7:0] $end
$var reg 67 ," operand_2_fraction [66:0] $end
$var reg 1 -" operand_2_sign $end
$var reg 8 ." result_exponent [7:0] $end
$var reg 67 /" result_fraction [66:0] $end
$var reg 1 0" result_sign $end
$var reg 1 1" round_bit $end
$var reg 1 2" sticky_bit $end
$var reg 67 3" sum [66:0] $end
$upscope $end
$scope module A3 $end
$var wire 32 4" operand_1 [31:0] $end
$var wire 32 5" operand_2 [31:0] $end
$var reg 32 6" adder_output [31:0] $end
$var reg 1 7" guard_bit $end
$var reg 8 8" operand_1_exponent [7:0] $end
$var reg 67 9" operand_1_fraction [66:0] $end
$var reg 1 :" operand_1_sign $end
$var reg 8 ;" operand_2_exponent [7:0] $end
$var reg 67 <" operand_2_fraction [66:0] $end
$var reg 1 =" operand_2_sign $end
$var reg 8 >" result_exponent [7:0] $end
$var reg 67 ?" result_fraction [66:0] $end
$var reg 1 @" result_sign $end
$var reg 1 A" round_bit $end
$var reg 1 B" sticky_bit $end
$var reg 67 C" sum [66:0] $end
$upscope $end
$scope module m1 $end
$var wire 1 D" is_prod_zero $end
$var wire 32 E" operand_1 [31:0] $end
$var wire 32 F" operand_2 [31:0] $end
$var wire 1 G" prod_overflow $end
$var wire 1 H" prod_sign $end
$var wire 1 I" zero_flag $end
$var wire 9 J" sum_exponent [8:0] $end
$var wire 32 K" result [31:0] $end
$var wire 1 L" product_round $end
$var wire 48 M" product_normalised [47:0] $end
$var wire 48 N" product [47:0] $end
$var wire 1 O" prod_underflow $end
$var wire 23 P" prod_mantis [22:0] $end
$var wire 24 Q" operand_2_eq [23:0] $end
$var wire 24 R" operand_1_eq [23:0] $end
$var wire 1 S" normalised $end
$var wire 9 T" exponent [8:0] $end
$upscope $end
$scope module m2 $end
$var wire 1 U" is_prod_zero $end
$var wire 1 V" prod_overflow $end
$var wire 1 W" prod_sign $end
$var wire 1 X" zero_flag $end
$var wire 9 Y" sum_exponent [8:0] $end
$var wire 32 Z" result [31:0] $end
$var wire 1 [" product_round $end
$var wire 48 \" product_normalised [47:0] $end
$var wire 48 ]" product [47:0] $end
$var wire 1 ^" prod_underflow $end
$var wire 23 _" prod_mantis [22:0] $end
$var wire 24 `" operand_2_eq [23:0] $end
$var wire 32 a" operand_2 [31:0] $end
$var wire 24 b" operand_1_eq [23:0] $end
$var wire 32 c" operand_1 [31:0] $end
$var wire 1 d" normalised $end
$var wire 9 e" exponent [8:0] $end
$upscope $end
$scope module m3 $end
$var wire 1 f" is_prod_zero $end
$var wire 1 g" prod_overflow $end
$var wire 1 h" prod_sign $end
$var wire 1 i" zero_flag $end
$var wire 9 j" sum_exponent [8:0] $end
$var wire 32 k" result [31:0] $end
$var wire 1 l" product_round $end
$var wire 48 m" product_normalised [47:0] $end
$var wire 48 n" product [47:0] $end
$var wire 1 o" prod_underflow $end
$var wire 23 p" prod_mantis [22:0] $end
$var wire 24 q" operand_2_eq [23:0] $end
$var wire 32 r" operand_2 [31:0] $end
$var wire 24 s" operand_1_eq [23:0] $end
$var wire 32 t" operand_1 [31:0] $end
$var wire 1 u" normalised $end
$var wire 9 v" exponent [8:0] $end
$upscope $end
$scope module m4 $end
$var wire 1 w" is_prod_zero $end
$var wire 1 x" prod_overflow $end
$var wire 1 y" prod_sign $end
$var wire 1 z" zero_flag $end
$var wire 9 {" sum_exponent [8:0] $end
$var wire 32 |" result [31:0] $end
$var wire 1 }" product_round $end
$var wire 48 ~" product_normalised [47:0] $end
$var wire 48 !# product [47:0] $end
$var wire 1 "# prod_underflow $end
$var wire 23 ## prod_mantis [22:0] $end
$var wire 24 $# operand_2_eq [23:0] $end
$var wire 32 %# operand_2 [31:0] $end
$var wire 24 &# operand_1_eq [23:0] $end
$var wire 32 '# operand_1 [31:0] $end
$var wire 1 (# normalised $end
$var wire 9 )# exponent [8:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module b2 $end
$var wire 1 # clk $end
$var wire 32 *# d [31:0] $end
$var wire 32 +# dm [31:0] $end
$var wire 1 2 mux $end
$var wire 1 $ rst $end
$var wire 32 ,# w2 [31:0] $end
$var wire 32 -# x [31:0] $end
$var wire 32 .# x2 [31:0] $end
$var wire 32 /# xo [31:0] $end
$var wire 32 0# x4 [31:0] $end
$var wire 32 1# x3 [31:0] $end
$var wire 32 2# w4 [31:0] $end
$var wire 32 3# w3 [31:0] $end
$var wire 32 4# w1 [31:0] $end
$var wire 1 C o $end
$var wire 32 5# f [31:0] $end
$var wire 32 6# am [31:0] $end
$var wire 32 7# af [31:0] $end
$var reg 32 8# d1 [31:0] $end
$scope module middle_reg $end
$var wire 1 # clk $end
$var wire 1 9# ld $end
$var wire 1 $ rst $end
$var wire 1 :# sclr $end
$var wire 32 ;# in [31:0] $end
$var parameter 32 <# N $end
$var reg 32 =# out [31:0] $end
$upscope $end
$scope module mux_input $end
$var wire 32 ># I0 [31:0] $end
$var wire 32 ?# I1 [31:0] $end
$var wire 1 2 select $end
$var wire 32 @# mux_out [31:0] $end
$var parameter 32 A# N $end
$upscope $end
$scope module mux_sign_bit $end
$var wire 32 B# I1 [31:0] $end
$var wire 1 C# select $end
$var wire 32 D# mux_out [31:0] $end
$var wire 32 E# I0 [31:0] $end
$var parameter 32 F# N $end
$upscope $end
$scope module pu $end
$var wire 32 G# w2 [31:0] $end
$var wire 32 H# x2 [31:0] $end
$var wire 32 I# xo [31:0] $end
$var wire 32 J# x4 [31:0] $end
$var wire 32 K# x3 [31:0] $end
$var wire 32 L# w4 [31:0] $end
$var wire 32 M# w3 [31:0] $end
$var wire 32 N# w1 [31:0] $end
$var wire 32 O# h4 [31:0] $end
$var wire 32 P# h3 [31:0] $end
$var wire 32 Q# h2 [31:0] $end
$var wire 32 R# h1 [31:0] $end
$var wire 32 S# af [31:0] $end
$var wire 32 T# a2 [31:0] $end
$var wire 32 U# a1 [31:0] $end
$scope module A1 $end
$var wire 32 V# operand_2 [31:0] $end
$var wire 32 W# operand_1 [31:0] $end
$var reg 32 X# adder_output [31:0] $end
$var reg 1 Y# guard_bit $end
$var reg 8 Z# operand_1_exponent [7:0] $end
$var reg 67 [# operand_1_fraction [66:0] $end
$var reg 1 \# operand_1_sign $end
$var reg 8 ]# operand_2_exponent [7:0] $end
$var reg 67 ^# operand_2_fraction [66:0] $end
$var reg 1 _# operand_2_sign $end
$var reg 8 `# result_exponent [7:0] $end
$var reg 67 a# result_fraction [66:0] $end
$var reg 1 b# result_sign $end
$var reg 1 c# round_bit $end
$var reg 1 d# sticky_bit $end
$var reg 67 e# sum [66:0] $end
$upscope $end
$scope module A2 $end
$var wire 32 f# operand_2 [31:0] $end
$var wire 32 g# operand_1 [31:0] $end
$var reg 32 h# adder_output [31:0] $end
$var reg 1 i# guard_bit $end
$var reg 8 j# operand_1_exponent [7:0] $end
$var reg 67 k# operand_1_fraction [66:0] $end
$var reg 1 l# operand_1_sign $end
$var reg 8 m# operand_2_exponent [7:0] $end
$var reg 67 n# operand_2_fraction [66:0] $end
$var reg 1 o# operand_2_sign $end
$var reg 8 p# result_exponent [7:0] $end
$var reg 67 q# result_fraction [66:0] $end
$var reg 1 r# result_sign $end
$var reg 1 s# round_bit $end
$var reg 1 t# sticky_bit $end
$var reg 67 u# sum [66:0] $end
$upscope $end
$scope module A3 $end
$var wire 32 v# operand_1 [31:0] $end
$var wire 32 w# operand_2 [31:0] $end
$var reg 32 x# adder_output [31:0] $end
$var reg 1 y# guard_bit $end
$var reg 8 z# operand_1_exponent [7:0] $end
$var reg 67 {# operand_1_fraction [66:0] $end
$var reg 1 |# operand_1_sign $end
$var reg 8 }# operand_2_exponent [7:0] $end
$var reg 67 ~# operand_2_fraction [66:0] $end
$var reg 1 !$ operand_2_sign $end
$var reg 8 "$ result_exponent [7:0] $end
$var reg 67 #$ result_fraction [66:0] $end
$var reg 1 $$ result_sign $end
$var reg 1 %$ round_bit $end
$var reg 1 &$ sticky_bit $end
$var reg 67 '$ sum [66:0] $end
$upscope $end
$scope module m1 $end
$var wire 1 ($ is_prod_zero $end
$var wire 32 )$ operand_2 [31:0] $end
$var wire 1 *$ prod_overflow $end
$var wire 1 +$ prod_sign $end
$var wire 1 ,$ zero_flag $end
$var wire 9 -$ sum_exponent [8:0] $end
$var wire 32 .$ result [31:0] $end
$var wire 1 /$ product_round $end
$var wire 48 0$ product_normalised [47:0] $end
$var wire 48 1$ product [47:0] $end
$var wire 1 2$ prod_underflow $end
$var wire 23 3$ prod_mantis [22:0] $end
$var wire 24 4$ operand_2_eq [23:0] $end
$var wire 24 5$ operand_1_eq [23:0] $end
$var wire 32 6$ operand_1 [31:0] $end
$var wire 1 7$ normalised $end
$var wire 9 8$ exponent [8:0] $end
$upscope $end
$scope module m2 $end
$var wire 1 9$ is_prod_zero $end
$var wire 32 :$ operand_1 [31:0] $end
$var wire 32 ;$ operand_2 [31:0] $end
$var wire 1 <$ prod_overflow $end
$var wire 1 =$ prod_sign $end
$var wire 1 >$ zero_flag $end
$var wire 9 ?$ sum_exponent [8:0] $end
$var wire 32 @$ result [31:0] $end
$var wire 1 A$ product_round $end
$var wire 48 B$ product_normalised [47:0] $end
$var wire 48 C$ product [47:0] $end
$var wire 1 D$ prod_underflow $end
$var wire 23 E$ prod_mantis [22:0] $end
$var wire 24 F$ operand_2_eq [23:0] $end
$var wire 24 G$ operand_1_eq [23:0] $end
$var wire 1 H$ normalised $end
$var wire 9 I$ exponent [8:0] $end
$upscope $end
$scope module m3 $end
$var wire 1 J$ is_prod_zero $end
$var wire 1 K$ prod_overflow $end
$var wire 1 L$ prod_sign $end
$var wire 1 M$ zero_flag $end
$var wire 9 N$ sum_exponent [8:0] $end
$var wire 32 O$ result [31:0] $end
$var wire 1 P$ product_round $end
$var wire 48 Q$ product_normalised [47:0] $end
$var wire 48 R$ product [47:0] $end
$var wire 1 S$ prod_underflow $end
$var wire 23 T$ prod_mantis [22:0] $end
$var wire 24 U$ operand_2_eq [23:0] $end
$var wire 32 V$ operand_2 [31:0] $end
$var wire 24 W$ operand_1_eq [23:0] $end
$var wire 32 X$ operand_1 [31:0] $end
$var wire 1 Y$ normalised $end
$var wire 9 Z$ exponent [8:0] $end
$upscope $end
$scope module m4 $end
$var wire 1 [$ is_prod_zero $end
$var wire 1 \$ prod_overflow $end
$var wire 1 ]$ prod_sign $end
$var wire 1 ^$ zero_flag $end
$var wire 9 _$ sum_exponent [8:0] $end
$var wire 32 `$ result [31:0] $end
$var wire 1 a$ product_round $end
$var wire 48 b$ product_normalised [47:0] $end
$var wire 48 c$ product [47:0] $end
$var wire 1 d$ prod_underflow $end
$var wire 23 e$ prod_mantis [22:0] $end
$var wire 24 f$ operand_2_eq [23:0] $end
$var wire 32 g$ operand_2 [31:0] $end
$var wire 24 h$ operand_1_eq [23:0] $end
$var wire 32 i$ operand_1 [31:0] $end
$var wire 1 j$ normalised $end
$var wire 9 k$ exponent [8:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module b3 $end
$var wire 1 # clk $end
$var wire 32 l$ d [31:0] $end
$var wire 32 m$ dm [31:0] $end
$var wire 1 1 mux $end
$var wire 1 $ rst $end
$var wire 32 n$ w3 [31:0] $end
$var wire 32 o$ x [31:0] $end
$var wire 32 p$ x2 [31:0] $end
$var wire 32 q$ x3 [31:0] $end
$var wire 32 r$ xo [31:0] $end
$var wire 32 s$ x4 [31:0] $end
$var wire 32 t$ w4 [31:0] $end
$var wire 32 u$ w2 [31:0] $end
$var wire 32 v$ w1 [31:0] $end
$var wire 1 B o $end
$var wire 32 w$ f [31:0] $end
$var wire 32 x$ am [31:0] $end
$var wire 32 y$ af [31:0] $end
$var reg 32 z$ d1 [31:0] $end
$scope module middle_reg $end
$var wire 1 # clk $end
$var wire 1 {$ ld $end
$var wire 1 $ rst $end
$var wire 1 |$ sclr $end
$var wire 32 }$ in [31:0] $end
$var parameter 32 ~$ N $end
$var reg 32 !% out [31:0] $end
$upscope $end
$scope module mux_input $end
$var wire 32 "% I0 [31:0] $end
$var wire 32 #% I1 [31:0] $end
$var wire 1 1 select $end
$var wire 32 $% mux_out [31:0] $end
$var parameter 32 %% N $end
$upscope $end
$scope module mux_sign_bit $end
$var wire 32 &% I1 [31:0] $end
$var wire 1 '% select $end
$var wire 32 (% mux_out [31:0] $end
$var wire 32 )% I0 [31:0] $end
$var parameter 32 *% N $end
$upscope $end
$scope module pu $end
$var wire 32 +% w3 [31:0] $end
$var wire 32 ,% x2 [31:0] $end
$var wire 32 -% x3 [31:0] $end
$var wire 32 .% xo [31:0] $end
$var wire 32 /% x4 [31:0] $end
$var wire 32 0% w4 [31:0] $end
$var wire 32 1% w2 [31:0] $end
$var wire 32 2% w1 [31:0] $end
$var wire 32 3% h4 [31:0] $end
$var wire 32 4% h3 [31:0] $end
$var wire 32 5% h2 [31:0] $end
$var wire 32 6% h1 [31:0] $end
$var wire 32 7% af [31:0] $end
$var wire 32 8% a2 [31:0] $end
$var wire 32 9% a1 [31:0] $end
$scope module A1 $end
$var wire 32 :% operand_2 [31:0] $end
$var wire 32 ;% operand_1 [31:0] $end
$var reg 32 <% adder_output [31:0] $end
$var reg 1 =% guard_bit $end
$var reg 8 >% operand_1_exponent [7:0] $end
$var reg 67 ?% operand_1_fraction [66:0] $end
$var reg 1 @% operand_1_sign $end
$var reg 8 A% operand_2_exponent [7:0] $end
$var reg 67 B% operand_2_fraction [66:0] $end
$var reg 1 C% operand_2_sign $end
$var reg 8 D% result_exponent [7:0] $end
$var reg 67 E% result_fraction [66:0] $end
$var reg 1 F% result_sign $end
$var reg 1 G% round_bit $end
$var reg 1 H% sticky_bit $end
$var reg 67 I% sum [66:0] $end
$upscope $end
$scope module A2 $end
$var wire 32 J% operand_2 [31:0] $end
$var wire 32 K% operand_1 [31:0] $end
$var reg 32 L% adder_output [31:0] $end
$var reg 1 M% guard_bit $end
$var reg 8 N% operand_1_exponent [7:0] $end
$var reg 67 O% operand_1_fraction [66:0] $end
$var reg 1 P% operand_1_sign $end
$var reg 8 Q% operand_2_exponent [7:0] $end
$var reg 67 R% operand_2_fraction [66:0] $end
$var reg 1 S% operand_2_sign $end
$var reg 8 T% result_exponent [7:0] $end
$var reg 67 U% result_fraction [66:0] $end
$var reg 1 V% result_sign $end
$var reg 1 W% round_bit $end
$var reg 1 X% sticky_bit $end
$var reg 67 Y% sum [66:0] $end
$upscope $end
$scope module A3 $end
$var wire 32 Z% operand_1 [31:0] $end
$var wire 32 [% operand_2 [31:0] $end
$var reg 32 \% adder_output [31:0] $end
$var reg 1 ]% guard_bit $end
$var reg 8 ^% operand_1_exponent [7:0] $end
$var reg 67 _% operand_1_fraction [66:0] $end
$var reg 1 `% operand_1_sign $end
$var reg 8 a% operand_2_exponent [7:0] $end
$var reg 67 b% operand_2_fraction [66:0] $end
$var reg 1 c% operand_2_sign $end
$var reg 8 d% result_exponent [7:0] $end
$var reg 67 e% result_fraction [66:0] $end
$var reg 1 f% result_sign $end
$var reg 1 g% round_bit $end
$var reg 1 h% sticky_bit $end
$var reg 67 i% sum [66:0] $end
$upscope $end
$scope module m1 $end
$var wire 1 j% is_prod_zero $end
$var wire 32 k% operand_2 [31:0] $end
$var wire 1 l% prod_overflow $end
$var wire 1 m% prod_sign $end
$var wire 1 n% zero_flag $end
$var wire 9 o% sum_exponent [8:0] $end
$var wire 32 p% result [31:0] $end
$var wire 1 q% product_round $end
$var wire 48 r% product_normalised [47:0] $end
$var wire 48 s% product [47:0] $end
$var wire 1 t% prod_underflow $end
$var wire 23 u% prod_mantis [22:0] $end
$var wire 24 v% operand_2_eq [23:0] $end
$var wire 24 w% operand_1_eq [23:0] $end
$var wire 32 x% operand_1 [31:0] $end
$var wire 1 y% normalised $end
$var wire 9 z% exponent [8:0] $end
$upscope $end
$scope module m2 $end
$var wire 1 {% is_prod_zero $end
$var wire 32 |% operand_2 [31:0] $end
$var wire 1 }% prod_overflow $end
$var wire 1 ~% prod_sign $end
$var wire 1 !& zero_flag $end
$var wire 9 "& sum_exponent [8:0] $end
$var wire 32 #& result [31:0] $end
$var wire 1 $& product_round $end
$var wire 48 %& product_normalised [47:0] $end
$var wire 48 && product [47:0] $end
$var wire 1 '& prod_underflow $end
$var wire 23 (& prod_mantis [22:0] $end
$var wire 24 )& operand_2_eq [23:0] $end
$var wire 24 *& operand_1_eq [23:0] $end
$var wire 32 +& operand_1 [31:0] $end
$var wire 1 ,& normalised $end
$var wire 9 -& exponent [8:0] $end
$upscope $end
$scope module m3 $end
$var wire 1 .& is_prod_zero $end
$var wire 32 /& operand_1 [31:0] $end
$var wire 32 0& operand_2 [31:0] $end
$var wire 1 1& prod_overflow $end
$var wire 1 2& prod_sign $end
$var wire 1 3& zero_flag $end
$var wire 9 4& sum_exponent [8:0] $end
$var wire 32 5& result [31:0] $end
$var wire 1 6& product_round $end
$var wire 48 7& product_normalised [47:0] $end
$var wire 48 8& product [47:0] $end
$var wire 1 9& prod_underflow $end
$var wire 23 :& prod_mantis [22:0] $end
$var wire 24 ;& operand_2_eq [23:0] $end
$var wire 24 <& operand_1_eq [23:0] $end
$var wire 1 =& normalised $end
$var wire 9 >& exponent [8:0] $end
$upscope $end
$scope module m4 $end
$var wire 1 ?& is_prod_zero $end
$var wire 1 @& prod_overflow $end
$var wire 1 A& prod_sign $end
$var wire 1 B& zero_flag $end
$var wire 9 C& sum_exponent [8:0] $end
$var wire 32 D& result [31:0] $end
$var wire 1 E& product_round $end
$var wire 48 F& product_normalised [47:0] $end
$var wire 48 G& product [47:0] $end
$var wire 1 H& prod_underflow $end
$var wire 23 I& prod_mantis [22:0] $end
$var wire 24 J& operand_2_eq [23:0] $end
$var wire 32 K& operand_2 [31:0] $end
$var wire 24 L& operand_1_eq [23:0] $end
$var wire 32 M& operand_1 [31:0] $end
$var wire 1 N& normalised $end
$var wire 9 O& exponent [8:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module b4 $end
$var wire 1 # clk $end
$var wire 32 P& d [31:0] $end
$var wire 32 Q& dm [31:0] $end
$var wire 1 0 mux $end
$var wire 1 $ rst $end
$var wire 32 R& w4 [31:0] $end
$var wire 32 S& x [31:0] $end
$var wire 32 T& x2 [31:0] $end
$var wire 32 U& x3 [31:0] $end
$var wire 32 V& x4 [31:0] $end
$var wire 32 W& xo [31:0] $end
$var wire 32 X& w3 [31:0] $end
$var wire 32 Y& w2 [31:0] $end
$var wire 32 Z& w1 [31:0] $end
$var wire 1 A o $end
$var wire 32 [& f [31:0] $end
$var wire 32 \& am [31:0] $end
$var wire 32 ]& af [31:0] $end
$var reg 32 ^& d1 [31:0] $end
$scope module middle_reg $end
$var wire 1 # clk $end
$var wire 1 _& ld $end
$var wire 1 $ rst $end
$var wire 1 `& sclr $end
$var wire 32 a& in [31:0] $end
$var parameter 32 b& N $end
$var reg 32 c& out [31:0] $end
$upscope $end
$scope module mux_input $end
$var wire 32 d& I0 [31:0] $end
$var wire 32 e& I1 [31:0] $end
$var wire 1 0 select $end
$var wire 32 f& mux_out [31:0] $end
$var parameter 32 g& N $end
$upscope $end
$scope module mux_sign_bit $end
$var wire 32 h& I1 [31:0] $end
$var wire 1 i& select $end
$var wire 32 j& mux_out [31:0] $end
$var wire 32 k& I0 [31:0] $end
$var parameter 32 l& N $end
$upscope $end
$scope module pu $end
$var wire 32 m& w4 [31:0] $end
$var wire 32 n& x2 [31:0] $end
$var wire 32 o& x3 [31:0] $end
$var wire 32 p& x4 [31:0] $end
$var wire 32 q& xo [31:0] $end
$var wire 32 r& w3 [31:0] $end
$var wire 32 s& w2 [31:0] $end
$var wire 32 t& w1 [31:0] $end
$var wire 32 u& h4 [31:0] $end
$var wire 32 v& h3 [31:0] $end
$var wire 32 w& h2 [31:0] $end
$var wire 32 x& h1 [31:0] $end
$var wire 32 y& af [31:0] $end
$var wire 32 z& a2 [31:0] $end
$var wire 32 {& a1 [31:0] $end
$scope module A1 $end
$var wire 32 |& operand_2 [31:0] $end
$var wire 32 }& operand_1 [31:0] $end
$var reg 32 ~& adder_output [31:0] $end
$var reg 1 !' guard_bit $end
$var reg 8 "' operand_1_exponent [7:0] $end
$var reg 67 #' operand_1_fraction [66:0] $end
$var reg 1 $' operand_1_sign $end
$var reg 8 %' operand_2_exponent [7:0] $end
$var reg 67 &' operand_2_fraction [66:0] $end
$var reg 1 '' operand_2_sign $end
$var reg 8 (' result_exponent [7:0] $end
$var reg 67 )' result_fraction [66:0] $end
$var reg 1 *' result_sign $end
$var reg 1 +' round_bit $end
$var reg 1 ,' sticky_bit $end
$var reg 67 -' sum [66:0] $end
$upscope $end
$scope module A2 $end
$var wire 32 .' operand_2 [31:0] $end
$var wire 32 /' operand_1 [31:0] $end
$var reg 32 0' adder_output [31:0] $end
$var reg 1 1' guard_bit $end
$var reg 8 2' operand_1_exponent [7:0] $end
$var reg 67 3' operand_1_fraction [66:0] $end
$var reg 1 4' operand_1_sign $end
$var reg 8 5' operand_2_exponent [7:0] $end
$var reg 67 6' operand_2_fraction [66:0] $end
$var reg 1 7' operand_2_sign $end
$var reg 8 8' result_exponent [7:0] $end
$var reg 67 9' result_fraction [66:0] $end
$var reg 1 :' result_sign $end
$var reg 1 ;' round_bit $end
$var reg 1 <' sticky_bit $end
$var reg 67 =' sum [66:0] $end
$upscope $end
$scope module A3 $end
$var wire 32 >' operand_1 [31:0] $end
$var wire 32 ?' operand_2 [31:0] $end
$var reg 32 @' adder_output [31:0] $end
$var reg 1 A' guard_bit $end
$var reg 8 B' operand_1_exponent [7:0] $end
$var reg 67 C' operand_1_fraction [66:0] $end
$var reg 1 D' operand_1_sign $end
$var reg 8 E' operand_2_exponent [7:0] $end
$var reg 67 F' operand_2_fraction [66:0] $end
$var reg 1 G' operand_2_sign $end
$var reg 8 H' result_exponent [7:0] $end
$var reg 67 I' result_fraction [66:0] $end
$var reg 1 J' result_sign $end
$var reg 1 K' round_bit $end
$var reg 1 L' sticky_bit $end
$var reg 67 M' sum [66:0] $end
$upscope $end
$scope module m1 $end
$var wire 1 N' is_prod_zero $end
$var wire 32 O' operand_2 [31:0] $end
$var wire 1 P' prod_overflow $end
$var wire 1 Q' prod_sign $end
$var wire 1 R' zero_flag $end
$var wire 9 S' sum_exponent [8:0] $end
$var wire 32 T' result [31:0] $end
$var wire 1 U' product_round $end
$var wire 48 V' product_normalised [47:0] $end
$var wire 48 W' product [47:0] $end
$var wire 1 X' prod_underflow $end
$var wire 23 Y' prod_mantis [22:0] $end
$var wire 24 Z' operand_2_eq [23:0] $end
$var wire 24 [' operand_1_eq [23:0] $end
$var wire 32 \' operand_1 [31:0] $end
$var wire 1 ]' normalised $end
$var wire 9 ^' exponent [8:0] $end
$upscope $end
$scope module m2 $end
$var wire 1 _' is_prod_zero $end
$var wire 32 `' operand_2 [31:0] $end
$var wire 1 a' prod_overflow $end
$var wire 1 b' prod_sign $end
$var wire 1 c' zero_flag $end
$var wire 9 d' sum_exponent [8:0] $end
$var wire 32 e' result [31:0] $end
$var wire 1 f' product_round $end
$var wire 48 g' product_normalised [47:0] $end
$var wire 48 h' product [47:0] $end
$var wire 1 i' prod_underflow $end
$var wire 23 j' prod_mantis [22:0] $end
$var wire 24 k' operand_2_eq [23:0] $end
$var wire 24 l' operand_1_eq [23:0] $end
$var wire 32 m' operand_1 [31:0] $end
$var wire 1 n' normalised $end
$var wire 9 o' exponent [8:0] $end
$upscope $end
$scope module m3 $end
$var wire 1 p' is_prod_zero $end
$var wire 32 q' operand_2 [31:0] $end
$var wire 1 r' prod_overflow $end
$var wire 1 s' prod_sign $end
$var wire 1 t' zero_flag $end
$var wire 9 u' sum_exponent [8:0] $end
$var wire 32 v' result [31:0] $end
$var wire 1 w' product_round $end
$var wire 48 x' product_normalised [47:0] $end
$var wire 48 y' product [47:0] $end
$var wire 1 z' prod_underflow $end
$var wire 23 {' prod_mantis [22:0] $end
$var wire 24 |' operand_2_eq [23:0] $end
$var wire 24 }' operand_1_eq [23:0] $end
$var wire 32 ~' operand_1 [31:0] $end
$var wire 1 !( normalised $end
$var wire 9 "( exponent [8:0] $end
$upscope $end
$scope module m4 $end
$var wire 1 #( is_prod_zero $end
$var wire 32 $( operand_1 [31:0] $end
$var wire 32 %( operand_2 [31:0] $end
$var wire 1 &( prod_overflow $end
$var wire 1 '( prod_sign $end
$var wire 1 (( zero_flag $end
$var wire 9 )( sum_exponent [8:0] $end
$var wire 32 *( result [31:0] $end
$var wire 1 +( product_round $end
$var wire 48 ,( product_normalised [47:0] $end
$var wire 48 -( product [47:0] $end
$var wire 1 .( prod_underflow $end
$var wire 23 /( prod_mantis [22:0] $end
$var wire 24 0( operand_2_eq [23:0] $end
$var wire 24 1( operand_1_eq [23:0] $end
$var wire 1 2( normalised $end
$var wire 9 3( exponent [8:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module t1 $end
$var wire 1 D o1 $end
$var wire 1 C o2 $end
$var wire 1 B o3 $end
$var wire 1 A o4 $end
$var wire 32 4( x1 [31:0] $end
$var wire 32 5( x2 [31:0] $end
$var wire 32 6( x3 [31:0] $end
$var wire 32 7( x4 [31:0] $end
$var wire 32 8( out [31:0] $end
$var wire 2 9( max_idx [1:0] $end
$var wire 4 :( idx [3:0] $end
$var wire 1 " done $end
$scope module Encoder $end
$var wire 4 ;( in [3:0] $end
$var reg 2 <( out [1:0] $end
$upscope $end
$upscope $end
$scope module weight_reg $end
$var wire 1 # clk $end
$var wire 32 =( in [31:0] $end
$var wire 1 >( ld $end
$var wire 1 $ rst $end
$var wire 1 ?( sclr $end
$var parameter 32 @( N $end
$var reg 32 A( out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 @(
b100000 l&
b100000 g&
b100000 b&
b100000 *%
b100000 %%
b100000 ~$
b100000 F#
b100000 A#
b100000 <#
b100000 b
b100000 ]
b100000 X
b111111100000000000000000000000 E
$end
#0
$dumpvars
b0 A(
0?(
1>(
b10111110010011001100110011001101 =(
b0 <(
b0 ;(
b0 :(
b0 9(
b0 8(
bx 7(
bx 6(
bx 5(
bx 4(
bx 3(
x2(
b100000000000000000000000 1(
bx 0(
bx /(
x.(
bx -(
bx ,(
x+(
bx *(
bx )(
x((
x'(
x&(
bx %(
b111111100000000000000000000000 $(
x#(
bx "(
x!(
b0 ~'
b0 }'
bx |'
bx {'
xz'
bx y'
bx x'
xw'
bx v'
bx u'
xt'
xs'
xr'
bx q'
xp'
bx o'
xn'
b0 m'
b0 l'
bx k'
bx j'
xi'
bx h'
bx g'
xf'
bx e'
bx d'
xc'
xb'
xa'
bx `'
x_'
bx ^'
x]'
b0 \'
b0 ['
bx Z'
bx Y'
xX'
bx W'
bx V'
xU'
bx T'
bx S'
xR'
xQ'
xP'
bx O'
xN'
bx M'
xL'
xK'
xJ'
bx I'
bx H'
xG'
bx F'
bx E'
xD'
bx C'
bx B'
xA'
bx @'
bx ?'
bx >'
bx ='
x<'
x;'
x:'
bx 9'
bx 8'
x7'
bx 6'
bx 5'
x4'
bx 3'
bx 2'
x1'
bx 0'
bx /'
bx .'
bx -'
x,'
x+'
x*'
bx )'
bx ('
x''
bx &'
bx %'
x$'
bx #'
bx "'
x!'
bx ~&
bx }&
bx |&
bx {&
bx z&
bx y&
bx x&
bx w&
bx v&
bx u&
b0 t&
b0 s&
b0 r&
bx q&
bx p&
bx o&
bx n&
b111111100000000000000000000000 m&
bx k&
bx j&
xi&
b0 h&
bx f&
b0 e&
bx d&
b0 c&
bx a&
0`&
1_&
bx ^&
bx ]&
bx \&
b0 [&
b0 Z&
b0 Y&
b0 X&
bx W&
bx V&
bx U&
bx T&
bx S&
b111111100000000000000000000000 R&
bx Q&
bx P&
bx O&
xN&
b0 M&
b0 L&
bx K&
bx J&
bx I&
xH&
bx G&
bx F&
xE&
bx D&
bx C&
xB&
xA&
x@&
x?&
bx >&
x=&
b100000000000000000000000 <&
bx ;&
bx :&
x9&
bx 8&
bx 7&
x6&
bx 5&
bx 4&
x3&
x2&
x1&
bx 0&
b111111100000000000000000000000 /&
x.&
bx -&
x,&
b0 +&
b0 *&
bx )&
bx (&
x'&
bx &&
bx %&
x$&
bx #&
bx "&
x!&
x~%
x}%
bx |%
x{%
bx z%
xy%
b0 x%
b0 w%
bx v%
bx u%
xt%
bx s%
bx r%
xq%
bx p%
bx o%
xn%
xm%
xl%
bx k%
xj%
bx i%
xh%
xg%
xf%
bx e%
bx d%
xc%
bx b%
bx a%
x`%
bx _%
bx ^%
x]%
bx \%
bx [%
bx Z%
bx Y%
xX%
xW%
xV%
bx U%
bx T%
xS%
bx R%
bx Q%
xP%
bx O%
bx N%
xM%
bx L%
bx K%
bx J%
bx I%
xH%
xG%
xF%
bx E%
bx D%
xC%
bx B%
bx A%
x@%
bx ?%
bx >%
x=%
bx <%
bx ;%
bx :%
bx 9%
bx 8%
bx 7%
bx 6%
bx 5%
bx 4%
bx 3%
b0 2%
b0 1%
b0 0%
bx /%
bx .%
bx -%
bx ,%
b111111100000000000000000000000 +%
bx )%
bx (%
x'%
b0 &%
bx $%
b0 #%
bx "%
b0 !%
bx }$
0|$
1{$
bx z$
bx y$
bx x$
b0 w$
b0 v$
b0 u$
b0 t$
bx s$
bx r$
bx q$
bx p$
bx o$
b111111100000000000000000000000 n$
bx m$
bx l$
bx k$
xj$
b0 i$
b0 h$
bx g$
bx f$
bx e$
xd$
bx c$
bx b$
xa$
bx `$
bx _$
x^$
x]$
x\$
x[$
bx Z$
xY$
b0 X$
b0 W$
bx V$
bx U$
bx T$
xS$
bx R$
bx Q$
xP$
bx O$
bx N$
xM$
xL$
xK$
xJ$
bx I$
xH$
b100000000000000000000000 G$
bx F$
bx E$
xD$
bx C$
bx B$
xA$
bx @$
bx ?$
x>$
x=$
x<$
bx ;$
b111111100000000000000000000000 :$
x9$
bx 8$
x7$
b0 6$
b0 5$
bx 4$
bx 3$
x2$
bx 1$
bx 0$
x/$
bx .$
bx -$
x,$
x+$
x*$
bx )$
x($
bx '$
x&$
x%$
x$$
bx #$
bx "$
x!$
bx ~#
bx }#
x|#
bx {#
bx z#
xy#
bx x#
bx w#
bx v#
bx u#
xt#
xs#
xr#
bx q#
bx p#
xo#
bx n#
bx m#
xl#
bx k#
bx j#
xi#
bx h#
bx g#
bx f#
bx e#
xd#
xc#
xb#
bx a#
bx `#
x_#
bx ^#
bx ]#
x\#
bx [#
bx Z#
xY#
bx X#
bx W#
bx V#
bx U#
bx T#
bx S#
bx R#
bx Q#
bx P#
bx O#
b0 N#
b0 M#
b0 L#
bx K#
bx J#
bx I#
bx H#
b111111100000000000000000000000 G#
bx E#
bx D#
xC#
b0 B#
bx @#
b0 ?#
bx >#
b0 =#
bx ;#
0:#
19#
bx 8#
bx 7#
bx 6#
b0 5#
b0 4#
b0 3#
b0 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
b111111100000000000000000000000 ,#
bx +#
bx *#
bx )#
x(#
b0 '#
b0 &#
bx %#
bx $#
bx ##
x"#
bx !#
bx ~"
x}"
bx |"
bx {"
xz"
xy"
xx"
xw"
bx v"
xu"
b0 t"
b0 s"
bx r"
bx q"
bx p"
xo"
bx n"
bx m"
xl"
bx k"
bx j"
xi"
xh"
xg"
xf"
bx e"
xd"
b0 c"
b0 b"
bx a"
bx `"
bx _"
x^"
bx ]"
bx \"
x["
bx Z"
bx Y"
xX"
xW"
xV"
xU"
bx T"
xS"
b100000000000000000000000 R"
bx Q"
bx P"
xO"
bx N"
bx M"
xL"
bx K"
bx J"
xI"
xH"
xG"
bx F"
b111111100000000000000000000000 E"
xD"
bx C"
xB"
xA"
x@"
bx ?"
bx >"
x="
bx <"
bx ;"
x:"
bx 9"
bx 8"
x7"
bx 6"
bx 5"
bx 4"
bx 3"
x2"
x1"
x0"
bx /"
bx ."
x-"
bx ,"
bx +"
x*"
bx )"
bx ("
x'"
bx &"
bx %"
bx $"
bx #"
x""
x!"
x~
bx }
bx |
x{
bx z
bx y
xx
bx w
bx v
xu
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
b0 j
b0 i
b0 h
bx g
bx f
bx e
bx d
b111111100000000000000000000000 c
bx a
bx `
x_
b0 ^
bx \
b0 [
bx Z
b0 Y
bx W
0V
1U
bx T
bx S
bx R
b0 Q
b0 P
b0 O
b0 N
bx M
bx L
bx K
bx J
bx I
b111111100000000000000000000000 H
bx G
bx F
0D
0C
0B
0A
b0 @
b0 ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
b10111110010011001100110011001101 6
bx 5
bx 4
x3
x2
x1
x0
b0 /
x.
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
0%
1$
0#
0"
b0 !
$end
#50
0K'
0A'
b0 M'
b0 I'
b1 H'
b1 E'
b1 B'
0g%
0]%
b0 i%
b0 e%
b1 d%
b1 a%
b1 ^%
0%$
0y#
b0 '$
b0 #$
b1 "$
b1 }#
b1 z#
0A"
07"
b0 C"
b0 ?"
b1 >"
b1 ;"
b1 8"
0'&
0i'
0c#
0Y#
b0 e#
b0 a#
b1 `#
b1 ]#
b1 Z#
02$
0z'
0!"
0u
b0 #"
b0 }
b1 |
b1 y
b1 v
0^"
0G%
0=%
b0 I%
b0 E%
b1 D%
b1 A%
b1 >%
0t%
0;'
01'
b0 ='
b0 9'
b1 8'
b1 5'
b1 2'
0S$
0o"
0+'
0!'
b0 -'
b0 )'
b1 ('
b1 %'
b1 "'
0X'
0W%
0M%
b0 Y%
b0 U%
b1 T%
b1 Q%
b1 N%
0H&
0s#
0i#
b0 u#
b0 q#
b1 p#
b1 m#
b1 j#
0d$
01"
0'"
b0 3"
b0 /"
b1 ."
b1 +"
b1 ("
0"#
0O"
1I"
0D$
1>$
1!&
1c'
1,$
09&
13&
1t'
1X"
1n%
0.(
1((
1M$
1i"
1R'
1B&
1^$
1z"
0G"
0<$
0}%
0a'
b0 6#
b0 ;#
b0 D#
0C#
0*$
01&
0r'
0V"
b0 x$
b0 }$
b0 (%
0'%
0l%
0&(
0K$
0g"
b0 \&
b0 a&
b0 j&
0i&
0P'
0@&
0\$
0x"
b0 P"
b0 E$
b0 (&
b0 j'
b0 7#
b0 E#
b0 S#
b0 x#
0$$
0!$
b0 3$
b0 :&
b0 {'
b0 _"
b0 y$
b0 )%
b0 7%
b0 \%
0f%
0c%
b0 u%
b0 /(
b0 T$
b0 p"
b0 ]&
b0 k&
b0 y&
b0 @'
0L'
0J'
0G'
0D'
b0 F'
b0 C'
b0 Y'
b0 I&
b0 e$
b0 ##
b0 R
b0 W
b0 `
0_
0x
0L"
0A$
0$&
0f'
b0 U#
b0 X#
b0 w#
0d#
0b#
0_#
0\#
b0 ^#
b0 [#
0/$
0P%
06&
0w'
0["
b0 9%
b0 <%
b0 [%
0H%
0F%
0C%
0@%
b0 B%
b0 ?%
0q%
b0 z&
b0 0'
b0 >'
0<'
0:'
07'
04'
b0 6'
b0 3'
0+(
0P$
0l"
b0 {&
b0 ~&
b0 ?'
0,'
0*'
0''
0$'
b0 &'
b0 #'
0U'
0E&
0h%
0`%
b0 b%
b0 _%
0a$
0&$
0|#
b0 ~#
b0 {#
0}"
b0 S
b0 a
b0 o
b0 6"
0B"
0@"
0="
0:"
b0 <"
b0 9"
b0 n
b0 s
b0 K"
b0 T"
0S"
b0 Q#
b0 V#
b0 @$
b0 I$
0H$
b0 5%
b0 :%
b0 #&
b110000001 -&
0,&
b0 w&
b0 |&
b0 e'
b110000001 o'
0n'
b0 R#
b0 W#
b0 .$
b110000001 8$
07$
b0 4%
b0 K%
b0 5&
b0 >&
0=&
b0 v&
b0 /'
b0 v'
b110000001 "(
0!(
b110000001 e"
0d"
b0 q
b0 t
b0 5"
0""
0~
0{
b0 z
b0 w
b0 6%
b0 ;%
b0 p%
b110000001 z%
0y%
b0 u&
b0 .'
b0 *(
b0 3(
02(
b110000001 Z$
0Y$
b110000001 v"
0u"
b0 x&
b0 }&
b0 T'
b110000001 ^'
0]'
b110000001 O&
0N&
b0 8%
b0 L%
b0 Z%
0X%
0V%
0S%
b0 R%
b0 O%
b110000001 k$
0j$
b0 T#
b0 h#
b0 v#
0t#
0r#
0o#
0l#
b0 n#
b0 k#
b110000001 )#
0(#
b0 p
b0 &"
b0 4"
02"
00"
0-"
0*"
b0 ,"
b0 )"
b0 M"
b0 B$
b0 %&
b0 g'
b0 0$
b0 7&
b0 x'
b0 \"
b0 m
b0 r
b0 Z"
b0 r%
b0 ,(
b0 Q$
b0 P#
b0 g#
b0 O$
b0 m"
b0 l
b0 %"
b0 k"
b0 V'
b0 F&
b0 3%
b0 J%
b0 D&
b0 b$
b0 O#
b0 f#
b0 `$
b0 ~"
b0 k
b0 $"
b0 |"
0H"
0D"
b0 N"
b0 Q"
0=$
09$
b0 C$
b0 F$
0~%
0{%
b0 &&
b0 )&
0b'
0_'
b0 h'
b0 k'
0+$
0($
b0 1$
b0 4$
02&
0.&
b0 8&
b0 ;&
0s'
0p'
b0 y'
b0 |'
b0 ]"
b0 `"
0U"
0W"
0m%
0j%
b0 s%
b0 v%
0'(
0#(
b0 -(
b0 0(
b0 R$
b0 U$
0J$
0L$
b0 n"
b0 q"
0f"
0h"
0Q'
0N'
b0 W'
b0 Z'
b0 G&
b0 J&
0?&
0A&
b0 c$
b0 f$
0[$
0]$
b0 !#
b0 $#
0w"
0y"
b1111111 J"
b1111111 ?$
b0 "&
b0 d'
b0 -$
b1111111 4&
b0 u'
b0 Y"
b0 o%
b1111111 )(
b0 N$
b0 j"
b0 S'
b0 C&
b0 _$
b0 {"
1.
b0 4
b0 >
b0 J
b0 \
b0 d
b0 F"
b0 .#
b0 H#
b0 ;$
b0 p$
b0 ,%
b0 |%
b0 T&
b0 n&
b0 `'
b0 =
b0 M
b0 g
b0 a"
b0 /#
b0 @#
b0 I#
b0 )$
b0 q$
b0 -%
b0 0&
b0 U&
b0 o&
b0 q'
b0 <
b0 L
b0 f
b0 r"
b0 1#
b0 K#
b0 V$
b0 r$
b0 $%
b0 .%
b0 k%
b0 V&
b0 p&
b0 %(
b0 ;
b0 K
b0 e
b0 %#
b0 0#
b0 J#
b0 g$
b0 s$
b0 /%
b0 K&
b0 W&
b0 f&
b0 q&
b0 O'
b0 5
b0 F
b0 Z
b0 G
b0 T
b0 *#
b0 >#
b0 +#
b0 8#
b0 l$
b0 "%
b0 m$
b0 z$
b0 P&
b0 d&
b0 Q&
b0 ^&
1#
#100
x_
bx R
bx W
bx `
x'%
bx x$
bx }$
bx (%
xA"
x7"
bx C"
x@"
bx ?"
bx >"
x="
x:"
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 <"
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 9"
x%$
xy#
bx "$
x|#
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 {#
xg%
x]%
bx i%
xf%
bx e%
bx d%
xc%
x`%
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 b%
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 _%
xK'
xA'
xG'
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 F'
xs#
xi#
bx u#
bx q#
x1"
x'"
bx 3"
bx /"
xW%
xM%
bx Y%
bx U%
x;'
x1'
x!"
xu
bx #"
bx }
xc#
xY#
xG%
x=%
bx I%
bx E%
x+'
x!'
bx -'
bx )'
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 6'
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 ^#
xi&
bx \&
bx a&
bx j&
bx T%
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 R%
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 O%
bx p#
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 n#
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 k#
xC#
bx 6#
bx ;#
bx D#
bx ."
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 ,"
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 )"
bx |
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 z
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 w
bx ]&
bx k&
bx y&
bx @'
bx M'
xJ'
bx I'
bx H'
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 C'
xD'
bx E'
bx B'
bx Y'
xU'
xX'
bx I&
xE&
xH&
bx y$
bx )%
bx 7%
bx \%
bx a%
bx ^%
bx e$
xa$
xd$
bx ##
x}"
x"#
bx u%
xq%
xt%
bx /(
x+(
x.(
bx T$
xP$
xS$
bx 7#
bx E#
bx S#
bx x#
bx '$
x$$
bx #$
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 ~#
x!$
bx }#
bx z#
bx p"
xl"
xo"
bx 3$
x/$
x2$
bx :&
x6&
x9&
bx z&
bx 0'
bx >'
bx ='
x:'
bx 9'
bx 8'
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 3'
x7'
x4'
bx 5'
bx 2'
bx {'
xw'
xz'
bx _"
x["
x^"
bx S
bx a
bx o
bx 6"
bx ;"
bx 8"
bx P"
xL"
xO"
bx U#
bx X#
bx w#
bx e#
xb#
bx a#
bx `#
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 [#
x_#
x\#
bx ]#
bx Z#
bx E$
xA$
xD$
bx 9%
bx <%
bx [%
xF%
bx D%
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 B%
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 ?%
xC%
x@%
bx A%
bx >%
bx (&
x$&
x'&
bx {&
bx ~&
bx ?'
x*'
bx ('
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 &'
b1xxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000 #'
x''
x$'
bx %'
bx "'
bx j'
xf'
xi'
bx x&
bx }&
bx T'
x]'
bx V'
xP'
xN&
bx F&
x@&
bx 8%
bx L%
bx Z%
xV%
xS%
xP%
bx Q%
bx N%
xj$
bx b$
x\$
x(#
bx ~"
xx"
bx 6%
bx ;%
bx p%
xy%
bx r%
xl%
bx u&
bx .'
bx *(
x2(
bx ,(
x&(
xY$
bx Q$
xK$
bx T#
bx h#
bx v#
xr#
xo#
xl#
bx m#
bx j#
xu"
bx m"
xg"
bx p
bx &"
bx 4"
x0"
x-"
x*"
bx +"
bx ("
bx R#
bx W#
bx .$
x7$
bx 0$
x*$
bx 4%
bx K%
bx 5&
x=&
bx 7&
x1&
bx v&
bx /'
bx v'
x!(
bx x'
xr'
xd"
bx \"
xV"
bx q
bx t
bx 5"
x~
x{
xx
bx y
bx v
bx n
bx s
bx K"
xS"
bx M"
xG"
bx Q#
bx V#
bx @$
xH$
bx B$
x<$
bx 5%
bx :%
bx #&
x,&
bx %&
x}%
bx w&
bx |&
bx e'
xn'
bx g'
xa'
xR'
xB&
bx 3%
bx J%
bx D&
x^$
bx O#
bx f#
bx `$
xz"
bx k
bx $"
bx |"
xn%
x((
xM$
bx P#
bx g#
bx O$
xi"
bx l
bx %"
bx k"
x,$
x3&
xt'
xX"
bx m
bx r
bx Z"
xI"
x>$
x!&
xc'
xQ'
xN'
bx W'
bx Z'
bx G&
bx J&
x?&
xA&
bx c$
bx f$
x[$
x]$
bx !#
bx $#
xw"
xy"
xm%
xj%
bx s%
bx v%
x'(
x#(
bx -(
bx 0(
bx R$
bx U$
xJ$
xL$
bx n"
bx q"
xf"
xh"
x+$
x($
bx 1$
bx 4$
x2&
x.&
bx 8&
bx ;&
xs'
xp'
bx y'
bx |'
bx ]"
bx `"
xU"
xW"
xH"
xD"
bx N"
bx Q"
x=$
x9$
bx C$
bx F$
x~%
x{%
bx &&
bx )&
xb'
x_'
bx h'
bx k'
bx ^'
bx S'
bx O&
bx C&
bx k$
bx _$
bx )#
bx {"
bx z%
bx o%
bx 3(
bx )(
bx Z$
bx N$
bx v"
bx j"
bx 8$
bx -$
bx >&
bx 4&
bx "(
bx u'
bx e"
bx Y"
bx T"
bx J"
bx I$
bx ?$
bx -&
bx "&
bx o'
bx d'
bx ;
bx K
bx e
bx %#
bx 0#
bx J#
bx g$
bx s$
bx /%
bx K&
bx W&
bx f&
bx q&
bx O'
bx <
bx L
bx f
bx r"
bx 1#
bx K#
bx V$
bx r$
bx $%
bx .%
bx k%
bx V&
bx p&
bx %(
bx =
bx M
bx g
bx a"
bx /#
bx @#
bx I#
bx )$
bx q$
bx -%
bx 0&
bx U&
bx o&
bx q'
bx >
bx J
bx \
bx d
bx F"
bx .#
bx H#
bx ;$
bx p$
bx ,%
bx |%
bx T&
bx n&
bx `'
bx P&
bx d&
bx Q&
bx ^&
bx l$
bx "%
bx m$
bx z$
bx *#
bx >#
bx +#
bx 8#
bx F
bx Z
bx G
bx T
0#
0$
#150
bx !
bx /
bx @
bx 8(
b110011001100110011001101 }'
b110011001100110011001101 l'
b110011001100110011001101 ['
b110011001100110011001101 L&
b110011001100110011001101 *&
b110011001100110011001101 w%
b110011001100110011001101 h$
b110011001100110011001101 W$
b110011001100110011001101 5$
b110011001100110011001101 &#
b110011001100110011001101 s"
b110011001100110011001101 b"
b0 9(
b0 <(
x"
bx :(
bx ;(
b10111110010011001100110011001101 ?
b10111110010011001100110011001101 N
b10111110010011001100110011001101 O
b10111110010011001100110011001101 P
b10111110010011001100110011001101 h
b10111110010011001100110011001101 i
b10111110010011001100110011001101 j
b10111110010011001100110011001101 c"
b10111110010011001100110011001101 t"
b10111110010011001100110011001101 '#
b10111110010011001100110011001101 2#
b10111110010011001100110011001101 3#
b10111110010011001100110011001101 4#
b10111110010011001100110011001101 L#
b10111110010011001100110011001101 M#
b10111110010011001100110011001101 N#
b10111110010011001100110011001101 6$
b10111110010011001100110011001101 X$
b10111110010011001100110011001101 i$
b10111110010011001100110011001101 t$
b10111110010011001100110011001101 u$
b10111110010011001100110011001101 v$
b10111110010011001100110011001101 0%
b10111110010011001100110011001101 1%
b10111110010011001100110011001101 2%
b10111110010011001100110011001101 x%
b10111110010011001100110011001101 +&
b10111110010011001100110011001101 M&
b10111110010011001100110011001101 X&
b10111110010011001100110011001101 Y&
b10111110010011001100110011001101 Z&
b10111110010011001100110011001101 r&
b10111110010011001100110011001101 s&
b10111110010011001100110011001101 t&
b10111110010011001100110011001101 \'
b10111110010011001100110011001101 m'
b10111110010011001100110011001101 ~'
b10111110010011001100110011001101 A(
xD
bx Q
bx Y
bx [
xC
bx 5#
bx =#
bx ?#
xB
bx w$
bx !%
bx #%
xA
bx [&
bx c&
bx e&
1#
#200
0#
#250
1#
#300
0#
#350
1#
#400
b0xxxxxxxx0xxx0xxx0xxx0xxx0xxxxx !
b0xxxxxxxx0xxx0xxx0xxx0xxx0xxxxx /
b0xxxxxxxx0xxx0xxx0xxx0xxx0xxxxx @
b0xxxxxxxx0xxx0xxx0xxx0xxx0xxxxx 8(
b111111010011001100110011001101 )
b111111010011001100110011001101 -
b111111010011001100110011001101 :
b111111010011001100110011001101 S&
b111111010011001100110011001101 7(
b111111000110011001100110011010 (
b111111000110011001100110011010 ,
b111111000110011001100110011010 9
b111111000110011001100110011010 o$
b111111000110011001100110011010 6(
b111110110011001100110011001101 '
b111110110011001100110011001101 +
b111110110011001100110011001101 8
b111110110011001100110011001101 -#
b111110110011001100110011001101 5(
b111110010011001100110011001101 &
b111110010011001100110011001101 *
b111110010011001100110011001101 7
b111110010011001100110011001101 I
b111110010011001100110011001101 4(
0#
#450
b111111010011001100110011001101 P&
b111111010011001100110011001101 d&
b111111010011001100110011001101 Q&
b111111010011001100110011001101 ^&
b111111000110011001100110011010 l$
b111111000110011001100110011010 "%
b111111000110011001100110011010 m$
b111111000110011001100110011010 z$
b111110110011001100110011001101 *#
b111110110011001100110011001101 >#
b111110110011001100110011001101 +#
b111110110011001100110011001101 8#
b111110010011001100110011001101 F
b111110010011001100110011001101 Z
b111110010011001100110011001101 G
b111110010011001100110011001101 T
1#
#500
0#
#550
1#
#600
0#
#650
1#
#700
0#
#750
1#
#800
0#
#850
b1 4
1%
1#
#900
b0 4
0%
#950
0#
#1000
1#
